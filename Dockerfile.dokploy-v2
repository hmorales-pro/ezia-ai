# Dockerfile optimisé pour Dokploy - Version 2 avec fix CSS
FROM node:20-alpine AS builder

RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copier les fichiers de package
COPY package.json package-lock.json ./

# Installer TOUTES les dépendances
RUN npm ci || npm install

# Copier le code source
COPY . .

# Désactiver temporairement le middleware problématique
RUN mv middleware.ts middleware.ts.disabled || true

# Utiliser la configuration de production
RUN cp next.config.production.ts next.config.ts || true

# IMPORTANT: Utiliser le CSS corrigé pour la production
RUN cp assets/globals.fixed.css assets/globals.css

# Variables d'environnement pour le build
ENV NEXT_TELEMETRY_DISABLED=1
ENV SKIP_ENV_VALIDATION=1
ENV NODE_ENV=production
ENV MONGODB_URI="mongodb://localhost:27017/temp"

# Build avec plus de mémoire
RUN NODE_OPTIONS="--max-old-space-size=4096" npm run build

# Stage de production
FROM node:20-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Copier les fichiers nécessaires
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/package.json ./package.json

# Créer les dossiers avec permissions ouvertes
RUN mkdir -p .data .next/cache && \
    chmod -R 777 .data .next/cache

EXPOSE 3000

CMD ["node", "server.js"]