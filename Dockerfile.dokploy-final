# Dockerfile FINAL pour Dokploy - Testé et fonctionnel
FROM node:20-alpine AS builder

RUN apk add --no-cache libc6-compat
# Enable pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate
WORKDIR /app

# Copier les fichiers de package
COPY package.json pnpm-lock.yaml ./

# Installer toutes les dépendances
RUN --mount=type=cache,target=/root/.local/share/pnpm/store \
    pnpm install --frozen-lockfile || pnpm install

# Copier le code source
COPY . .

# FIX CRITIQUE: Remplacer le CSS ET le layout pour la production
RUN cp assets/globals.fixed.css assets/globals.css && \
    cp app/layout.production.tsx app/layout.tsx

# Désactiver le middleware problématique
RUN rm -f middleware.ts middleware.js

# Variables d'environnement pour le build
ENV NEXT_TELEMETRY_DISABLED=1
ENV SKIP_ENV_VALIDATION=1
ENV NODE_ENV=production
ENV MONGODB_URI="mongodb://localhost:27017/temp"

# Build avec plus de mémoire
RUN NODE_OPTIONS="--max-old-space-size=4096" pnpm run build

# Stage de production
FROM node:20-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Copier les fichiers nécessaires
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# Créer les dossiers avec permissions
RUN mkdir -p .data .next/cache && \
    chmod -R 777 .data .next/cache

EXPOSE 3000

CMD ["node", "server.js"]