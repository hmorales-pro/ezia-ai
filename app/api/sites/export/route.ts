import { NextRequest, NextResponse } from 'next/server';
import { StreamingSiteGenerator } from '@/lib/agents/streaming-site-generator';

export const runtime = 'nodejs';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { siteId, exportFormat = 'zip' } = body;

    if (!siteId) {
      return NextResponse.json(
        { error: 'Site ID is required' },
        { status: 400 }
      );
    }

    // Note: In a real implementation, you would fetch the site from a database
    // For now, we'll generate a new site based on the siteId
    const generator = new StreamingSiteGenerator(process.env.HF_TOKEN);
    
    // Simulate site generation for export
    const siteStructure = await generateSiteForExport(siteId);

    if (exportFormat === 'html') {
      // Single HTML export
      const html = generateCompleteHtml(siteStructure);
      
      return new NextResponse(html, {
        headers: {
          'Content-Type': 'text/html',
          'Content-Disposition': `attachment; filename="${siteStructure.title || 'website'}.html"`,
        },
      });
    }

    return NextResponse.json(
      { error: 'Unsupported export format' },
      { status: 400 }
    );

  } catch (error) {
    console.error('Export error:', error);
    return NextResponse.json(
      { 
        error: 'Failed to export site',
        details: error instanceof Error ? error.message : error
      },
      { status: 500 }
    );
  }
}

// Helper functions
async function generateSiteForExport(siteId: string) {
  // This is a placeholder - in a real app, you'd fetch from database
  return {
    id: siteId,
    title: 'Generated Website',
    description: 'A website generated by AI',
    locale: 'fr',
    pages: [
      {
        id: 'home',
        title: 'Accueil',
        slug: 'home',
        meta: { description: 'Page d\'accueil' },
        blocks: [
          {
            id: 'hero',
            type: 'hero',
            component: 'Hero',
            props: {
              headline: 'Bienvenue sur notre site',
              subheadline: 'DÃ©couvrez nos services',
              cta: 'Commencer',
              ctaUrl: '#services'
            }
          }
        ]
      }
    ],
    theme: {
      name: 'Default Theme',
      tokens: {
        colors: {
          primary: '#3b82f6',
          secondary: '#1e40af',
          accent: '#f59e0b',
          background: '#ffffff',
          surface: '#f3f4f6',
          text: '#111827',
          textSecondary: '#6b7280',
          border: '#e5e7eb'
        },
        typography: {
          fontFamily: {
            heading: 'Inter',
            body: 'Inter'
          }
        }
      }
    },
    navigation: {
      header: { links: [] },
      footer: { links: [], copyright: '' }
    }
  };
}

function generatePageHtml(page: any, site: any) {
  return `<!DOCTYPE html>
<html lang="${site.locale || 'fr'}">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${page.title} - ${site.title}</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <!-- Page content would be rendered here -->
  <h1>${page.title}</h1>
  <!-- Add more content based on blocks -->
</body>
</html>`;
}

function generateCss(theme: any) {
  return `/* Generated CSS */
:root {
  --color-primary: ${theme?.tokens?.colors?.primary || '#3b82f6'};
  --color-secondary: ${theme?.tokens?.colors?.secondary || '#1e40af'};
  --color-background: ${theme?.tokens?.colors?.background || '#ffffff'};
  --color-text: ${theme?.tokens?.colors?.text || '#111827'};
}

body {
  font-family: ${theme?.tokens?.typography?.fontFamily?.body || 'sans-serif'};
  color: var(--color-text);
  background-color: var(--color-background);
}

/* Add more CSS as needed */`;
}

function generateCompleteHtml(site: any) {
  const css = generateCss(site.theme);
  
  return `<!DOCTYPE html>
<html lang="${site.locale || 'fr'}">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${site.title}</title>
  <style>
    ${css}
  </style>
</head>
<body>
  <header>
    <h1>${site.title}</h1>
  </header>
  <main>
    ${site.pages.map((page: any) => `
      <section id="${page.id}">
        <h2>${page.title}</h2>
        <!-- Page content -->
      </section>
    `).join('')}
  </main>
  <footer>
    <p>&copy; ${new Date().getFullYear()} ${site.title}</p>
  </footer>
</body>
</html>`;
}