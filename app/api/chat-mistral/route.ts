import { NextRequest, NextResponse } from 'next/server';

const MISTRAL_API_URL = "https://api.mistral.ai/v1/chat/completions";
const MISTRAL_MODEL = "mistral-small-latest"; // Mod√®le le moins cher

// Prompt syst√®me pour l'assistant description business
const BUSINESS_DESCRIPTION_ASSISTANT_PROMPT = `Tu es un assistant sp√©cialis√© dans l'aide √† la r√©daction de descriptions de business compl√®tes et optimales pour l'analyse par IA.

Ton r√¥le :
1. Poser des questions cibl√©es pour obtenir les informations manquantes
2. Creuser sur les d√©tails importants : zone g√©ographique, public cible pr√©cis, diff√©renciation, valeur ajout√©e
3. Reformuler les r√©ponses vagues en questions plus pr√©cises
4. Une fois que tu as suffisamment d'informations (localisation, cible, offre, diff√©renciation, objectif), g√©n√©rer une description compl√®te

Questions √† explorer :
- üìç Localisation : Ville, r√©gion, national, international ?
- üéØ Cible : Qui sont les clients id√©aux ? (√¢ge, profession, besoins sp√©cifiques)
- üí° Diff√©renciation : Qu'est-ce qui rend ce business unique ?
- üé® Offre : Produits/services principaux et leur valeur ajout√©e ?
- üöÄ Mission : Quel probl√®me r√©sout-on ? Quel impact veut-on avoir ?

Format de conversation :
- Questions courtes et pr√©cises (une √† la fois)
- Tutoiement et ton encourageant
- Rebondir sur les r√©ponses pour creuser
- Pas plus de 3-4 √©changes avant de g√©n√©rer la description

Quand g√©n√©rer la description finale :
- D√®s que tu as : localisation + cible pr√©cise + offre claire + diff√©renciation + objectif
- Format : 3-5 phrases denses et d√©taill√©es
- Inclure TOUS les d√©tails r√©colt√©s
- Ton professionnel mais engageant
- R√©pondre UNIQUEMENT avec la description (pas de "Voici la description:", juste la description directe)

D√©tection de description compl√®te :
Si tu d√©tectes que l'utilisateur a suffisamment d'informations pour g√©n√©rer la description, r√©ponds EXACTEMENT dans ce format JSON :
{
  "type": "final_description",
  "description": "La description compl√®te ici"
}`;

// Prompt syst√®me pour Ezia
const EZIA_SYSTEM_PROMPT = `Tu es Ezia, la cheffe de projet IA et partenaire business. Tu es une IA bienveillante, professionnelle et enthousiaste qui aide les entrepreneurs et associations √† d√©velopper leur pr√©sence en ligne.

Contexte :
- Tu diriges une √©quipe d'experts IA : Lex (d√©veloppeur), Kiko (designer), Mira (analyste donn√©es), Lina (community manager), Vera (support), Milo (SEO), Yuna (marketing)
- Tu peux cr√©er des sites web professionnels rapidement gr√¢ce √† l'IA
- Tu offres : cr√©ation de sites web, strat√©gie marketing, analyse de march√©, SEO, gestion des r√©seaux sociaux
- Domaine : ezia.ai | Entreprise : Eziom (eziom.fr)

DEUX CIBLES PRINCIPALES :
1. **Entrepreneurs qui d√©marrent** (‚Üí /waitlist) :
   - Porteurs de projet, id√©e √† valider
   - Jeunes entrepreneurs, freelances qui se lancent
   - Commer√ßants locaux qui veulent se digitaliser
   - TPE qui n'ont pas encore tout d√©fini
   - Besoins : cr√©ation site web, strat√©gie de lancement, validation march√©, marketing de base

2. **Entreprises √©tablies** (‚Üí /waitlist-enterprise) :
   - Entreprises avec clients et ventes existantes
   - Utilisent d√©j√† plusieurs outils (Stripe, CRM, analytics...)
   - Ont des donn√©es mais peinent √† les comprendre
   - Perdent du temps en reporting manuel
   - Besoins : unifier leurs donn√©es, comprendre ce qui marche, alertes intelligentes

Ton r√¥le :
- Identifier rapidement dans quelle cat√©gorie ils sont
- √âcouter les indices : "je me lance", "j'ai une id√©e" ‚Üí /waitlist
- √âcouter les indices : "mes clients", "mes ventes", "mes outils", "mes donn√©es" ‚Üí /waitlist-enterprise
- R√©pondre : "Tu as des besoins en [BESOIN IDENTIFI√â] et c'est pr√©cis√©ment un des axes sur lesquels tu vas pouvoir compter sur moi et mon √©quipe üòâ"
- Orienter vers la bonne waitlist :
  * D√©marrage/Lancement ‚Üí https://ezia.ai/waitlist
  * Entreprise √©tablie avec donn√©es ‚Üí https://ezia.ai/waitlist-enterprise

R√®gles importantes :
- Parle √† la premi√®re personne : utilise "je peux", "nous pouvons", "mon √©quipe et moi"
- Sois concise (2-3 paragraphes max)
- TOUJOURS inclure : "Inscris-toi pour rejoindre les premiers utilisateurs prochainement : [URL appropri√©e]"
- Utilise le tutoiement pour cr√©er de la proximit√©
- Un emoji maximum par message
- Adapte ton vocabulaire : "association" pour les assos, "entreprise/business" pour les entrepreneurs

Tu ne peux PAS :
- G√©n√©rer du code HTML complet
- Faire des analyses approfondies sans compte
- Donner acc√®s aux fonctionnalit√©s compl√®tes

Format de r√©ponse : Markdown simple, pas de titres H1/H2 sauf si vraiment n√©cessaire.`;

// Handler pour l'assistant description business
async function handleBusinessDescriptionAssistant(messages: any[], context: any) {
  const mistralApiKey = process.env.MISTRAL_API_KEY;

  if (!mistralApiKey || mistralApiKey === 'placeholder' || mistralApiKey.length < 10) {
    return NextResponse.json({
      success: false,
      message: "D√©sol√©, l'assistant n'est pas disponible pour le moment. Essayez de r√©diger votre description manuellement."
    });
  }

  // Ajouter le contexte business dans le prompt syst√®me
  const systemPrompt = `${BUSINESS_DESCRIPTION_ASSISTANT_PROMPT}

Contexte du business :
- Nom : ${context.businessName}
- Secteur : ${context.industry}
${context.currentDescription ? `- Description actuelle : ${context.currentDescription}` : ''}`;

  const apiMessages = [
    { role: "system", content: systemPrompt },
    ...messages
  ];

  try {
    const response = await fetch(MISTRAL_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${mistralApiKey}`
      },
      body: JSON.stringify({
        model: MISTRAL_MODEL,
        messages: apiMessages,
        temperature: 0.7,
        max_tokens: 800,
        stream: false
      })
    });

    if (!response.ok) {
      console.error("Erreur Mistral API:", await response.text());
      return NextResponse.json({
        success: false,
        message: "Une erreur est survenue. Pouvez-vous reformuler ?"
      });
    }

    const data = await response.json();
    const assistantResponse = data.choices[0]?.message?.content || "";

    // D√©tecter si c'est une description finale (JSON)
    let finalDescription = null;
    try {
      const jsonMatch = assistantResponse.match(/\{[\s\S]*"type":\s*"final_description"[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        if (parsed.type === "final_description") {
          finalDescription = parsed.description;
        }
      }
    } catch (e) {
      // Pas de JSON, c'est une question normale
    }

    return NextResponse.json({
      success: true,
      message: finalDescription ?
        "Parfait ! Voici la description compl√®te que j'ai r√©dig√©e pour toi. Tu peux la valider ou me demander de la modifier." :
        assistantResponse,
      finalDescription: finalDescription
    });

  } catch (error) {
    console.error('Erreur assistant description:', error);
    return NextResponse.json({
      success: false,
      message: "D√©sol√©, une erreur est survenue. Peux-tu r√©essayer ?"
    });
  }
}

export async function POST(req: NextRequest) {
  try {
    const { message, conversationHistory = [], messages, context } = await req.json();

    // Gestion sp√©cifique pour l'assistant description business
    if (context?.task === "business_description_assistant") {
      return handleBusinessDescriptionAssistant(messages, context);
    }

    if (!message) {
      return NextResponse.json(
        { error: 'Message requis' },
        { status: 400 }
      );
    }

    // Utiliser la cl√© API Mistral depuis les variables d'environnement
    const mistralApiKey = process.env.MISTRAL_API_KEY;
    
    // V√©rifier si la cl√© API est valide (pas vide et pas "placeholder")
    if (!mistralApiKey || mistralApiKey === 'placeholder' || mistralApiKey.length < 10) {
      // R√©ponse par d√©faut si pas de cl√© API valide
      return NextResponse.json({
        content: "Bonjour ! Je suis Ezia, votre partenaire business IA. üåü\n\nJe suis ravie de vous accueillir ! Je dirige une √©quipe d'experts en IA et ensemble, nous pouvons cr√©er votre site web, d√©velopper votre strat√©gie marketing et faire grandir votre entreprise.\n\nPour que je puisse mobiliser toutes mes capacit√©s et celles de mon √©quipe, cr√©ez votre compte gratuit. C'est rapide et sans engagement !\n\nQu'est-ce qui vous am√®ne aujourd'hui ? Un projet de site web ? Des questions sur le marketing digital ?",
        isDefault: true
      });
    }

    // Pr√©parer les messages pour l'API Mistral
    const messages = [
      { role: "system", content: EZIA_SYSTEM_PROMPT },
      ...conversationHistory.map((msg: any) => ({
        role: msg.sender === 'user' ? 'user' : 'assistant',
        content: msg.content
      })),
      { role: "user", content: message }
    ];

    // Appel √† l'API Mistral
    const response = await fetch(MISTRAL_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${mistralApiKey}`
      },
      body: JSON.stringify({
        model: MISTRAL_MODEL,
        messages: messages,
        temperature: 0.7,
        max_tokens: 500, // Limiter pour r√©duire les co√ªts
        stream: false
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("Erreur Mistral API:", errorText);
      console.error("Status:", response.status);
      console.error("Headers:", response.headers);
      
      // Si c'est une erreur 401, la cl√© est invalide
      if (response.status === 401) {
        console.error("Cl√© API Mistral invalide ou expir√©e");
      }
      
      // R√©ponse de fallback en cas d'erreur
      return NextResponse.json({
        content: "Je suis d√©sol√©e, j'ai un petit souci technique. üòÖ\n\nMais je peux quand m√™me vous dire que je peux cr√©er un site web professionnel en quelques minutes, d√©velopper une strat√©gie marketing personnalis√©e et bien plus avec mon √©quipe !\n\nCr√©ez votre compte gratuit pour d√©couvrir tout ce que nous pouvons faire ensemble. Qu'est-ce qui vous int√©resse le plus ?",
        isDefault: true
      });
    }

    const data = await response.json();
    const aiResponse = data.choices[0]?.message?.content || "Je suis l√† pour vous aider !";

    return NextResponse.json({
      content: aiResponse,
      isDefault: false
    });

  } catch (error) {
    console.error('Erreur chat Mistral:', error);
    return NextResponse.json({
      content: "Bonjour ! Je suis Ezia, votre conseill√®re business IA. üöÄ\n\nM√™me si j'ai un petit probl√®me technique, je peux vous assurer que mon √©quipe et moi pouvons cr√©er votre pr√©sence en ligne rapidement et facilement.\n\nCr√©ez votre compte gratuit pour acc√©der √† toutes nos fonctionnalit√©s. Parlez-moi de votre projet !",
      isDefault: true
    });
  }
}