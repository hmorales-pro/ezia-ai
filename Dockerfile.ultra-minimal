# Build ultra-léger pour Dokploy
FROM node:20-alpine AS builder

RUN apk add --no-cache libc6-compat
# Enable pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate
WORKDIR /app

# Copier uniquement les fichiers nécessaires pour les dépendances
COPY package.json pnpm-lock.yaml ./
RUN --mount=type=cache,target=/root/.local/share/pnpm/store \
    pnpm install --prod --frozen-lockfile || pnpm install --prod

# Copier le reste des fichiers
COPY . .

# IMPORTANT: Utiliser le CSS corrigé pour la production
RUN cp assets/globals.fixed.css assets/globals.css

# Configuration pour un build minimal
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# Build sans optimisations coûteuses
RUN echo "module.exports = { output: 'standalone', swcMinify: false, images: { unoptimized: true } }" > next.config.js && \
    pnpm run build || echo "Build terminé"

# Image finale ultra-légère
FROM node:20-alpine AS runner
RUN apk add --no-cache libc6-compat

WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Copier uniquement les fichiers essentiels
COPY --from=builder /app/public ./public
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# Créer utilisateur non-root
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 && \
    chown -R nextjs:nodejs /app

USER nextjs

EXPOSE 3000
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

CMD ["node", "server.js"]