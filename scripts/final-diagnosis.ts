import { promises as fs } from 'fs';
import path from 'path';

// Script de diagnostic final pour identifier le probl√®me de persistance

async function finalDiagnosis() {
  console.log('üîç DIAGNOSTIC FINAL - Probl√®me de persistance des sites web\n');
  
  const storageDir = path.join(process.cwd(), '.data');
  const projectsFile = path.join(storageDir, 'projects.json');
  const businessesFile = path.join(storageDir, 'businesses.json');
  const backupProjects = path.join(storageDir, 'projects.backup.json');
  const backupBusinesses = path.join(storageDir, 'businesses.backup.json');

  // 1. V√©rifier l'√©tat actuel des fichiers
  console.log('1Ô∏è‚É£ √âtat actuel des fichiers:');
  for (const [name, file] of [
    ['projects.json', projectsFile],
    ['businesses.json', businessesFile],
    ['projects.backup.json', backupProjects],
    ['businesses.backup.json', backupBusinesses]
  ]) {
    try {
      const stats = await fs.stat(file);
      console.log(`   ${name}: ${stats.size} octets, modifi√© le ${stats.mtime}`);
    } catch {
      console.log(`   ${name}: N'EXISTE PAS`);
    }
  }

  // 2. Diagnostiquer les causes potentielles
  console.log('\n2Ô∏è‚É£ Causes potentielles identifi√©es:');
  console.log('   a) Synchronisation m√©moire/fichier d√©faillante');
  console.log('   b) Processus concurrent vidant les fichiers');
  console.log('   c) Probl√®me de permissions sur les fichiers');
  console.log('   d) Hot-reload de Next.js qui r√©initialise le module');

  // 3. Restaurer depuis les sauvegardes si disponibles
  console.log('\n3Ô∏è‚É£ Tentative de restauration:');
  
  // Restaurer projects.json
  const backupProjectsExists = await fs.access(backupProjects).then(() => true).catch(() => false);
  if (backupProjectsExists) {
    const backupContent = await fs.readFile(backupProjects, 'utf-8');
    await fs.writeFile(projectsFile, backupContent);
    console.log('   ‚úÖ projects.json restaur√© depuis la sauvegarde');
  } else {
    // Cr√©er un projet de test minimal
    const testData = {
      "test_user_ezia_001": [{
        "id": "project-debug-" + Date.now(),
        "userId": "test_user_ezia_001",
        "businessId": "bus_debug",
        "businessName": "Test Debug",
        "name": "Site de test - Debug persistance",
        "description": "Site cr√©√© pour tester la persistance",
        "html": "<!DOCTYPE html><html><head><title>Test Debug</title></head><body><h1>Site de test pour debug persistance</h1><p>Ce site a √©t√© cr√©√© pour tester la persistance des donn√©es.</p></body></html>",
        "css": "",
        "js": "",
        "prompt": "Site de test pour debug",
        "version": 1,
        "versions": [{
          "version": 1,
          "html": "<!DOCTYPE html><html><head><title>Test Debug</title></head><body><h1>Site de test pour debug persistance</h1><p>Ce site a √©t√© cr√©√© pour tester la persistance des donn√©es.</p></body></html>",
          "css": "",
          "js": "",
          "prompt": "Site de test pour debug",
          "createdAt": new Date().toISOString(),
          "createdBy": "Debug System"
        }],
        "status": "draft",
        "createdAt": new Date().toISOString(),
        "updatedAt": new Date().toISOString(),
        "metadata": {
          "generatedBy": "debug-system",
          "industry": "test",
          "targetAudience": "debug",
          "features": ["debug"]
        }
      }]
    };
    await fs.writeFile(projectsFile, JSON.stringify(testData, null, 2));
    console.log('   ‚ö†Ô∏è  Nouveau projet de test cr√©√©');
  }

  // Restaurer businesses.json
  const backupBusinessesExists = await fs.access(backupBusinesses).then(() => true).catch(() => false);
  if (backupBusinessesExists) {
    const backupContent = await fs.readFile(backupBusinesses, 'utf-8');
    await fs.writeFile(businessesFile, backupContent);
    console.log('   ‚úÖ businesses.json restaur√© depuis la sauvegarde');
  } else {
    // Cr√©er un business de test minimal
    const testBusiness = [{
      "_id": "bus_debug",
      "business_id": "bus_debug",
      "userId": "test_user_ezia_001",
      "name": "Test Debug Business",
      "description": "Business cr√©√© pour le debug",
      "industry": "technology",
      "stage": "startup",
      "_createdAt": new Date().toISOString(),
      "_updatedAt": new Date().toISOString()
    }];
    await fs.writeFile(businessesFile, JSON.stringify(testBusiness, null, 2));
    console.log('   ‚ö†Ô∏è  Nouveau business de test cr√©√©');
  }

  // 4. Cr√©er des sauvegardes
  await fs.copyFile(projectsFile, backupProjects);
  await fs.copyFile(businessesFile, backupBusinesses);
  console.log('\n4Ô∏è‚É£ Nouvelles sauvegardes cr√©√©es');

  // 5. Recommandations
  console.log('\n5Ô∏è‚É£ RECOMMANDATIONS POUR R√âSOUDRE LE PROBL√àME:');
  console.log('   a) Utiliser uniquement MongoDB pour la persistance');
  console.log('   b) √âliminer le syst√®me de stockage sur fichier');
  console.log('   c) Impl√©menter un syst√®me de sauvegarde automatique');
  console.log('   d) Ajouter des logs pour tracer les √©critures/suppressions');

  console.log('\n‚úÖ Diagnostic termin√©. Les donn√©es ont √©t√© restaur√©es temporairement.');
}

// Ex√©cuter le diagnostic
finalDiagnosis().catch(console.error);