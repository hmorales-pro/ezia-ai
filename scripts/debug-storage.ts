// Script pour d√©bugger le syst√®me de stockage et comprendre pourquoi les projets ne persistent pas

import { promises as fs } from 'fs';
import path from 'path';

async function debugStorage() {
  console.log('üîç D√©marrage du debug du syst√®me de stockage...\n');
  
  // V√©rifier le dossier .data
  const dataDir = path.join(process.cwd(), '.data');
  const projectsFile = path.join(dataDir, 'projects.json');
  const businessesFile = path.join(dataDir, 'businesses.json');
  
  try {
    // 1. V√©rifier l'existence du dossier .data
    console.log('1Ô∏è‚É£ V√©rification du dossier .data:');
    const dataDirExists = await fs.access(dataDir).then(() => true).catch(() => false);
    console.log(`   Dossier .data existe: ${dataDirExists ? '‚úÖ' : '‚ùå'}`);
    
    if (!dataDirExists) {
      console.log('   ‚ö†Ô∏è  Cr√©ation du dossier .data...');
      await fs.mkdir(dataDir, { recursive: true });
      console.log('   ‚úÖ Dossier cr√©√©');
    }
    
    // 2. V√©rifier le fichier projects.json
    console.log('\n2Ô∏è‚É£ V√©rification du fichier projects.json:');
    const projectsFileExists = await fs.access(projectsFile).then(() => true).catch(() => false);
    console.log(`   Fichier existe: ${projectsFileExists ? '‚úÖ' : '‚ùå'}`);
    
    if (projectsFileExists) {
      const stats = await fs.stat(projectsFile);
      console.log(`   Taille: ${stats.size} octets`);
      console.log(`   Derni√®re modification: ${stats.mtime}`);
      
      try {
        const content = await fs.readFile(projectsFile, 'utf-8');
        const projects = JSON.parse(content);
        console.log(`   Contenu valide: ‚úÖ`);
        console.log(`   Nombre d'utilisateurs: ${Object.keys(projects).length}`);
        
        for (const [userId, userProjects] of Object.entries(projects)) {
          console.log(`   - Utilisateur ${userId}: ${(userProjects as any[]).length} projet(s)`);
        }
      } catch (error) {
        console.log(`   Contenu invalide: ‚ùå`);
        console.log(`   Erreur: ${error.message}`);
      }
    }
    
    // 3. V√©rifier le fichier businesses.json
    console.log('\n3Ô∏è‚É£ V√©rification du fichier businesses.json:');
    const businessesFileExists = await fs.access(businessesFile).then(() => true).catch(() => false);
    console.log(`   Fichier existe: ${businessesFileExists ? '‚úÖ' : '‚ùå'}`);
    
    if (businessesFileExists) {
      const stats = await fs.stat(businessesFile);
      console.log(`   Taille: ${stats.size} octets`);
      console.log(`   Derni√®re modification: ${stats.mtime}`);
    }
    
    // 4. V√©rifier les permissions
    console.log('\n4Ô∏è‚É£ V√©rification des permissions:');
    try {
      // Test d'√©criture
      const testFile = path.join(dataDir, 'test-write.tmp');
      await fs.writeFile(testFile, 'test');
      await fs.unlink(testFile);
      console.log(`   √âcriture dans .data: ‚úÖ`);
    } catch (error) {
      console.log(`   √âcriture dans .data: ‚ùå`);
      console.log(`   Erreur: ${error.message}`);
    }
    
    // 5. V√©rifier l'environnement
    console.log('\n5Ô∏è‚É£ Environnement:');
    console.log(`   NODE_ENV: ${process.env.NODE_ENV || 'development'}`);
    console.log(`   Working directory: ${process.cwd()}`);
    console.log(`   Platform: ${process.platform}`);
    
    // 6. Recommandations
    console.log('\nüí° Recommandations:');
    if (!projectsFileExists || stats?.size === 0) {
      console.log('   - Le fichier projects.json est vide ou n\'existe pas');
      console.log('   - Les donn√©es peuvent √™tre perdues lors du red√©marrage du serveur');
      console.log('   - Consid√©rer l\'utilisation de MongoDB pour la persistance');
    }
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors du debug:', error);
  }
}

// Ex√©cuter le debug
debugStorage().catch(console.error);