#!/usr/bin/env node

/**
 * Script de migration des donn√©es de la waitlist
 * Ajoute des valeurs par d√©faut pour les nouveaux champs
 */

const fs = require('fs');
const path = require('path');

const WAITLIST_FILE = path.join(process.cwd(), '.data', 'waitlist.json');

console.log('üîÑ MIGRATION DES DONN√âES DE LA WAITLIST\n');

// Charger les donn√©es existantes
let waitlistData;
try {
  const content = fs.readFileSync(WAITLIST_FILE, 'utf8');
  waitlistData = JSON.parse(content);
} catch (error) {
  console.error('‚ùå Erreur lors du chargement du fichier waitlist.json');
  console.error(error.message);
  process.exit(1);
}

console.log(`üìä ${waitlistData.length} entr√©es trouv√©es\n`);

// Backup des donn√©es originales
const backupFile = WAITLIST_FILE.replace('.json', `-backup-${Date.now()}.json`);
fs.writeFileSync(backupFile, JSON.stringify(waitlistData, null, 2));
console.log(`üíæ Backup cr√©√© : ${backupFile}\n`);

// Migration des donn√©es
let migrated = 0;
waitlistData.forEach((entry, index) => {
  let hasChanges = false;
  
  // Ajouter les nouveaux champs s'ils n'existent pas
  if (!entry.hasOwnProperty('profile')) {
    // Essayer de deviner le profil bas√© sur l'entreprise
    if (entry.company) {
      if (entry.company.toLowerCase().includes('association')) {
        entry.profile = 'association';
      } else if (entry.name.toLowerCase().includes('√©tudiant')) {
        entry.profile = 'etudiant';
      } else {
        entry.profile = 'entrepreneur'; // Par d√©faut pour ceux avec entreprise
      }
    } else {
      entry.profile = 'Non sp√©cifi√©';
    }
    hasChanges = true;
  }
  
  if (!entry.hasOwnProperty('needs')) {
    entry.needs = 'Non sp√©cifi√©';
    hasChanges = true;
  }
  
  if (!entry.hasOwnProperty('urgency')) {
    // Par d√©faut, on consid√®re les anciens inscrits comme "curieux"
    entry.urgency = 'curious';
    hasChanges = true;
  }
  
  if (hasChanges) {
    migrated++;
    console.log(`‚úÖ Migr√© : ${entry.name} (${entry.email})`);
  }
});

// Sauvegarder les donn√©es migr√©es
fs.writeFileSync(WAITLIST_FILE, JSON.stringify(waitlistData, null, 2));

console.log(`\n‚ú® Migration termin√©e !`);
console.log(`   ${migrated} entr√©es migr√©es`);
console.log(`   ${waitlistData.length - migrated} entr√©es d√©j√† √† jour`);
console.log(`\nüìÅ Les donn√©es ont √©t√© sauvegard√©es dans : ${WAITLIST_FILE}`);
console.log(`üìÅ Backup disponible dans : ${backupFile}`);