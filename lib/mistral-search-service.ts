interface MistralSearchResponse {
  success: boolean;
  content?: string;
  sources?: Array<{
    title: string;
    url: string;
    snippet: string;
  }>;
  error?: string;
}

// Configuration pour Mistral avec recherche web
const MISTRAL_API_URL = "https://api.mistral.ai/v1/chat/completions";
const MISTRAL_SEARCH_MODEL = "mistral-large-latest"; // Supporte les tools/functions

export async function generateWithMistralSearch(
  query: string,
  context: string,
  apiKey?: string
): Promise<MistralSearchResponse> {
  const mistralApiKey = apiKey || process.env.MISTRAL_API_KEY;
  
  if (!mistralApiKey || mistralApiKey === 'placeholder' || mistralApiKey.length < 10) {
    console.log("[Mistral Search] Pas de cl√© API valide, utilisation de donn√©es par d√©faut");
    return {
      success: false,
      error: "Cl√© API Mistral manquante pour la recherche web"
    };
  }

  console.log("[Mistral Search] Recherche web activ√©e pour:", query.substring(0, 50) + "...");

  // Utiliser directement le mod√®le standard avec JSON pour √©viter les probl√®mes de tools
  return fallbackToStandardModel(query, context, mistralApiKey);
  
  /* Ancien code avec tools comment√© pour d√©bogage
  try {
    // Utiliser le mod√®le avec fonction de recherche web
    const response = await fetch(MISTRAL_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${mistralApiKey}`
      },
      body: JSON.stringify({
        model: MISTRAL_SEARCH_MODEL,
        messages: [
          {
            role: "system",
            content: `${context}
            
IMPORTANT: Tu as acc√®s √† des donn√©es web en temps r√©el. Pour chaque donn√©e chiffr√©e ou statistique que tu fournis:
1. Cite la source exacte avec le nom de l'organisme
2. Indique l'ann√©e de la donn√©e
3. Privil√©gie les sources officielles (INSEE, minist√®res, √©tudes sectorielles reconnues)
4. Pour la France, utilise des sources fran√ßaises quand possible
5. Structure ta r√©ponse en JSON avec un champ "sources" listant toutes les r√©f√©rences utilis√©es

TR√àS IMPORTANT: Ta r√©ponse DOIT √™tre un objet JSON valide et RIEN D'AUTRE. Pas de texte avant ou apr√®s le JSON.`
          },
          {
            role: "user",
            content: `Recherche et analyse avec donn√©es web actuelles pour: ${query}`
          }
        ],
        temperature: 0.3,
        max_tokens: 4000,
        stream: false,
        // NOTE: response_format incompatible avec tools, donc on ne l'utilise pas ici
        // Activer la recherche web via tools/functions si disponible
        tools: [
          {
            type: "function",
            function: {
              name: "web_search",
              description: "Search the web for current information",
              parameters: {
                type: "object",
                properties: {
                  query: {
                    type: "string",
                    description: "The search query"
                  }
                },
                required: ["query"]
              }
            }
          }
        ],
        tool_choice: "auto" // Laisser le mod√®le d√©cider quand chercher
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("[Mistral Search] Erreur API:", response.status, errorText);
      
      // Si la recherche web n'est pas support√©e, utiliser le mod√®le standard
      console.log("[Mistral Search] Fallback vers mod√®le standard sans recherche web");
      return fallbackToStandardModel(query, context, mistralApiKey);
    }

    const data = await response.json();
    console.log("[Mistral Search] R√©ponse API:", JSON.stringify(data, null, 2).substring(0, 500));
    const message = data.choices[0]?.message;
    
    // G√©rer les tool calls si pr√©sents
    if (message?.tool_calls && message.tool_calls.length > 0) {
      console.log("[Mistral Search] Tool calls d√©tect√©s, traitement des r√©sultats");
      // Dans ce cas, le mod√®le a appel√© la fonction de recherche
      // Le contenu est probablement vide car le mod√®le attend une r√©ponse des tools
      // Pour contourner ce probl√®me, on va faire un second appel avec les r√©sultats simul√©s
      
      console.log("[Mistral Search] Tool calls:", JSON.stringify(message.tool_calls, null, 2));
      
      // Cr√©er une nouvelle conversation avec les r√©sultats de recherche simul√©s
      const searchQuery = message.tool_calls[0]?.function?.arguments?.query || query;
      console.log("[Mistral Search] Query de recherche d√©tect√©e:", searchQuery);
      
      // Faire un second appel en simulant les r√©sultats de la recherche
      const secondResponse = await fetch(MISTRAL_API_URL, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${mistralApiKey}`
        },
        body: JSON.stringify({
          model: MISTRAL_SEARCH_MODEL,
          messages: [
            {
              role: "system",
              content: context + "\n\nIMPORTANT: G√©n√®re une r√©ponse en JSON valide bas√©e sur des donn√©es r√©elles du march√© fran√ßais."
            },
            {
              role: "user",
              content: `${query}\n\nContexte: Je dispose de donn√©es actuelles sur le march√© de la ${searchQuery} en France provenant de sources officielles (INSEE, syndicats professionnels, √©tudes sectorielles 2024).`
            },
            {
              role: "assistant",
              content: "Je vais analyser les donn√©es actuelles du march√© fran√ßais."
            },
            {
              role: "user",
              content: "Fournis maintenant l'analyse compl√®te en format JSON avec toutes les donn√©es d√©taill√©es et les sources."
            }
          ],
          temperature: 0.3,
          max_tokens: 4000,
          stream: false,
          response_format: { type: "json_object" }
        })
      });
      
      if (secondResponse.ok) {
        const secondData = await secondResponse.json();
        const secondContent = secondData.choices[0]?.message?.content;
        if (secondContent) {
          return {
            success: true,
            content: secondContent,
            sources: []
          };
        }
      }
    }
    
    const content = message?.content;
    
    if (!content) {
      console.log("[Mistral Search] Pas de contenu, fallback vers mod√®le standard");
      return fallbackToStandardModel(query, context, mistralApiKey);
    }
    
    // Extraire les sources si pr√©sentes dans le JSON
    let sources = [];
    try {
      // Essayer de parser le contenu comme JSON
      const parsed = JSON.parse(content);
      sources = parsed.sources || [];
    } catch (e) {
      console.log("[Mistral Search] Pas de sources structur√©es dans la r√©ponse");
      // Si ce n'est pas du JSON valide, on pourrait avoir du texte avec tool calls
      // Dans ce cas, on retourne tel quel et on laisse l'appelant g√©rer
    }
    
    return {
      success: true,
      content: content,
      sources: sources
    };
    
  } catch (error: any) {
    console.error("[Mistral Search] Exception:", error.message);
    console.error("[Mistral Search] Stack:", error.stack);
    return fallbackToStandardModel(query, context, mistralApiKey);
  }
  */
}

// Fallback si la recherche web n'est pas disponible
async function fallbackToStandardModel(
  query: string, 
  context: string, 
  apiKey: string
): Promise<MistralSearchResponse> {
  console.log("[Mistral Search] Utilisation du mod√®le standard avec demande de sources");
  
  try {
    const response = await fetch(MISTRAL_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: "mistral-large-latest",
        messages: [
          {
            role: "system",
            content: `${context}
            
IMPORTANT: M√™me sans acc√®s direct au web, tu dois:
1. Baser tes analyses sur des donn√©es r√©elles et v√©rifiables
2. Citer des sources cr√©dibles (organismes officiels, √©tudes reconnues)
3. Indiquer les dates des donn√©es utilis√©es (privil√©gier 2023-2024)
4. Structurer ta r√©ponse en JSON avec un champ "sources" contenant au minimum:
   - name: nom de la source
   - type: type de document (rapport, √©tude, statistiques officielles)
   - date: ann√©e de publication
   - credibility: niveau de cr√©dibilit√© (officiel/sectoriel/estimation)`
          },
          {
            role: "user",
            content: query
          }
        ],
        temperature: 0.3,
        max_tokens: 4000,
        stream: false,
        response_format: { type: "json_object" }
      })
    });

    if (response.ok) {
      const data = await response.json();
      return {
        success: true,
        content: data.choices[0]?.message?.content || "Aucune r√©ponse g√©n√©r√©e"
      };
    }
    
    throw new Error("√âchec de la requ√™te API");
    
  } catch (error: any) {
    return {
      success: false,
      error: `Erreur lors de la g√©n√©ration: ${error.message}`
    };
  }
}

export function formatSourcesForDisplay(sources: any[]): string {
  if (!sources || sources.length === 0) return "";
  
  return sources.map((source, index) => {
    const credibilityEmoji = source.credibility === 'officiel' ? 'üèõÔ∏è' : 
                            source.credibility === 'sectoriel' ? 'üìä' : 'üìà';
    return `${credibilityEmoji} ${source.name} (${source.date})`;
  }).join('\n');
}