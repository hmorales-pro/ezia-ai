import { generateWithMistralAPI } from '../mistral-ai-service';
import type {
  IMarketAnalysis,
  IMarketOverview,
  ICompetitionAnalysis,
  ICustomerAnalysis,
  IOpportunity,
  IThreat,
  IOceanBlueStrategy,
  IScoring,
  IDataSource
} from '@/models/MarketAnalysis';

export interface MarketResearchInput {
  businessId: string;
  userId: string;
  businessName: string;
  industry: string;
  description: string;
  targetMarket?: string;
  existingData?: {
    competitors?: string[];
    customerInsights?: string;
    marketSize?: string;
  };
}

export interface MarketResearchResult {
  analysis: Omit<IMarketAnalysis, '_id' | 'createdAt' | 'updatedAt'>;
  success: boolean;
  error?: string;
}

export class MarketResearchAgent {
  /**
   * G√©n√®re une analyse de march√© compl√®te en utilisant MistralAI
   */
  async generateMarketAnalysis(input: MarketResearchInput): Promise<MarketResearchResult> {
    try {
      console.log(`üîç [MarketResearchAgent] D√©marrage analyse pour ${input.businessName} (${input.industry})`);

      // Construire le prompt structur√© pour MistralAI
      const prompt = this.buildAnalysisPrompt(input);

      // Appeler MistralAI avec le prompt
      const mistralResponse = await generateWithMistralAPI(
        prompt,
        "Tu es un expert en analyse de march√© et en strat√©gie Ocean Blue. Tu dois retourner uniquement un JSON valide et structur√©."
      );

      if (!mistralResponse.success || !mistralResponse.content) {
        throw new Error(mistralResponse.error || 'Erreur lors de l\'appel √† MistralAI');
      }

      const response = mistralResponse.content;

      console.log(`‚úÖ [MarketResearchAgent] R√©ponse MistralAI re√ßue (${response.length} caract√®res)`);

      // Parser la r√©ponse JSON
      const analysisData = this.parseAnalysisResponse(response);

      // Calculer le Market Opportunity Index (MOI)
      const scoring = this.calculateScoring(analysisData);

      // Construire l'analyse compl√®te
      const analysis: Omit<IMarketAnalysis, '_id' | 'createdAt' | 'updatedAt'> = {
        businessId: input.businessId,
        userId: input.userId,
        industry: input.industry,
        business_name: input.businessName,
        business_description: input.description,
        market_overview: analysisData.market_overview,
        competition: analysisData.competition,
        customer_analysis: analysisData.customer_analysis,
        opportunities: analysisData.opportunities,
        threats: analysisData.threats,
        ocean_blue_strategy: analysisData.ocean_blue_strategy,
        scoring: scoring,
        meta: {
          analysis_version: '1.0',
          generated_at: new Date(),
          last_updated: new Date(),
          next_refresh_date: this.calculateNextRefreshDate('monthly'),
          refresh_frequency: 'monthly',
          data_sources: this.getDataSources(),
          llm_model: 'mistral-large-latest',
          analyst_notes: `Analyse g√©n√©r√©e automatiquement pour ${input.businessName}`,
        },
        reports: {
          markdown: this.generateMarkdownReport(analysisData, scoring),
        },
      };

      console.log(`üéØ [MarketResearchAgent] MOI calcul√©: ${scoring.market_opportunity_index}/100`);

      return {
        success: true,
        analysis,
      };

    } catch (error) {
      console.error('‚ùå [MarketResearchAgent] Erreur:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur lors de l\'analyse de march√©',
        analysis: {} as any,
      };
    }
  }

  /**
   * Construit le prompt pour MistralAI
   */
  private buildAnalysisPrompt(input: MarketResearchInput): string {
    return `Tu es un expert en analyse de march√© et en strat√©gie Ocean Blue. Tu dois analyser le march√© pour l'entreprise suivante et retourner un JSON structur√©.

**ENTREPRISE:**
- Nom: ${input.businessName}
- Secteur: ${input.industry}
- Description: ${input.description}
${input.targetMarket ? `- March√© cible: ${input.targetMarket}` : ''}
${input.existingData?.competitors ? `- Concurrents connus: ${input.existingData.competitors.join(', ')}` : ''}
${input.existingData?.customerInsights ? `- Insights clients: ${input.existingData.customerInsights}` : ''}
${input.existingData?.marketSize ? `- Taille de march√© connue: ${input.existingData.marketSize}` : ''}

**MISSION:**
R√©alise une analyse de march√© compl√®te incluant:
1. Vue d'ensemble du march√© (taille, croissance, tendances, segments)
2. Analyse concurrentielle (principaux concurrents, paysage, barri√®res, avantages)
3. Analyse client (personas, besoins, crit√®res d'achat, d√©cideurs)
4. Opportunit√©s (titre, description, impact, d√©lai)
5. Menaces (titre, description, s√©v√©rit√©, probabilit√©, mitigation)
6. Strat√©gie Ocean Blue (√©liminer, r√©duire, augmenter, cr√©er, proposition de valeur)

**FORMAT DE R√âPONSE:**
Retourne UNIQUEMENT un JSON valide avec cette structure exacte:

\`\`\`json
{
  "market_overview": {
    "market_size": "Taille estim√©e du march√© en ‚Ç¨/$ avec source",
    "growth_rate": "Taux de croissance annuel avec p√©riode",
    "trends": ["Tendance 1", "Tendance 2", "Tendance 3"],
    "key_drivers": ["Driver 1", "Driver 2", "Driver 3"],
    "segments": [
      {
        "name": "Nom du segment",
        "size": "Taille/part du segment",
        "growth": "Croissance du segment",
        "characteristics": ["Caract√©ristique 1", "Caract√©ristique 2"]
      }
    ]
  },
  "competition": {
    "main_competitors": [
      {
        "name": "Nom concurrent",
        "position": "Leader/Challenger/Niche",
        "strengths": ["Force 1", "Force 2"],
        "weaknesses": ["Faiblesse 1", "Faiblesse 2"],
        "market_share": "Part de march√© estim√©e",
        "pricing": "Strat√©gie tarifaire",
        "differentiation": "Diff√©renciation principale"
      }
    ],
    "competitive_landscape": "Description synth√©tique du paysage concurrentiel",
    "entry_barriers": ["Barri√®re 1", "Barri√®re 2", "Barri√®re 3"],
    "competitive_advantages": ["Avantage 1", "Avantage 2", "Avantage 3"]
  },
  "customer_analysis": {
    "personas": [
      {
        "name": "Nom du persona",
        "demographics": {
          "age": "Tranche d'√¢ge",
          "location": "Localisation",
          "industry": "Secteur d'activit√©",
          "company_size": "Taille entreprise",
          "role": "Poste/fonction"
        },
        "pain_points": ["Pain point 1", "Pain point 2", "Pain point 3"],
        "needs": ["Besoin 1", "Besoin 2", "Besoin 3"],
        "buying_behavior": ["Comportement 1", "Comportement 2"],
        "communication_channels": ["Canal 1", "Canal 2", "Canal 3"]
      }
    ],
    "customer_needs": ["Besoin global 1", "Besoin global 2"],
    "buying_criteria": ["Crit√®re 1", "Crit√®re 2", "Crit√®re 3"],
    "decision_makers": ["D√©cideur type 1", "D√©cideur type 2"]
  },
  "opportunities": [
    {
      "title": "Titre opportunit√©",
      "description": "Description d√©taill√©e",
      "potential_impact": "high|medium|low",
      "timeframe": "Court/moyen/long terme avec estimation",
      "required_resources": ["Ressource 1", "Ressource 2"]
    }
  ],
  "threats": [
    {
      "title": "Titre menace",
      "description": "Description d√©taill√©e",
      "severity": "high|medium|low",
      "probability": "high|medium|low",
      "mitigation": ["Action mitigation 1", "Action mitigation 2"]
    }
  ],
  "ocean_blue_strategy": {
    "eliminate": ["√âl√©ment √† √©liminer 1", "√âl√©ment √† √©liminer 2"],
    "reduce": ["√âl√©ment √† r√©duire 1", "√âl√©ment √† r√©duire 2"],
    "increase": ["√âl√©ment √† augmenter 1", "√âl√©ment √† augmenter 2"],
    "create": ["Nouvel √©l√©ment √† cr√©er 1", "Nouvel √©l√©ment √† cr√©er 2"],
    "value_proposition": "Proposition de valeur unique en une phrase claire",
    "target_market": "Description du march√© cible sp√©cifique"
  }
}
\`\`\`

**IMPORTANT:**
- Retourne UNIQUEMENT le JSON, sans texte avant ou apr√®s
- Base-toi sur des donn√©es r√©alistes et actuelles pour le secteur ${input.industry}
- Sois pr√©cis et factuel dans tes estimations
- Pour la strat√©gie Ocean Blue, sois cr√©atif et diff√©renciant
- Assure-toi que tous les champs requis sont remplis`;
  }

  /**
   * Parse la r√©ponse JSON de MistralAI
   */
  private parseAnalysisResponse(response: string): any {
    try {
      // Extraire le JSON de la r√©ponse (peut √™tre enrob√© dans ```json```)
      let jsonStr = response.trim();

      // Supprimer les backticks si pr√©sents
      if (jsonStr.startsWith('```json')) {
        jsonStr = jsonStr.replace(/^```json\n/, '').replace(/\n```$/, '');
      } else if (jsonStr.startsWith('```')) {
        jsonStr = jsonStr.replace(/^```\n/, '').replace(/\n```$/, '');
      }

      // Nettoyer les caract√®res de contr√¥le invalides dans les cha√Ænes JSON
      // Remplacer les retours √† la ligne, tabulations et autres caract√®res de contr√¥le
      jsonStr = jsonStr
        .replace(/[\u0000-\u001F\u007F-\u009F]/g, ' ')  // Supprimer caract√®res de contr√¥le
        .replace(/\s+/g, ' ')  // Normaliser les espaces multiples
        .trim();

      const parsed = JSON.parse(jsonStr);

      // Valider la structure minimale
      if (!parsed.market_overview || !parsed.competition || !parsed.customer_analysis) {
        throw new Error('Structure JSON invalide: champs requis manquants');
      }

      return parsed;
    } catch (error) {
      console.error('‚ùå Erreur parsing JSON:', error);
      console.error('R√©ponse re√ßue:', response.substring(0, 500));
      throw new Error('Impossible de parser la r√©ponse de l\'IA');
    }
  }

  /**
   * Calcule le Market Opportunity Index (MOI) et les scores
   */
  private calculateScoring(data: any): IScoring {
    // Scoring sur 100 pour chaque dimension

    // 1. Attractivit√© du march√© (taille + croissance + tendances positives)
    const marketAttractiveness = this.scoreMarketAttractiveness(data.market_overview);

    // 2. Intensit√© concurrentielle (nombre concurrents + barri√®res + concentration)
    const competitiveIntensity = this.scoreCompetitiveIntensity(data.competition);

    // 3. Difficult√© d'entr√©e (barri√®res + ressources requises)
    const entryDifficulty = this.scoreEntryDifficulty(data.competition, data.opportunities);

    // 4. Potentiel de croissance (tendances + opportunit√©s - menaces)
    const growthPotential = this.scoreGrowthPotential(
      data.market_overview,
      data.opportunities,
      data.threats
    );

    // 5. Demande client (personas + pain points + needs)
    const customerDemand = this.scoreCustomerDemand(data.customer_analysis);

    // Calcul du MOI global (formule pond√©r√©e)
    const moi = Math.round(
      marketAttractiveness * 0.25 +
      (100 - competitiveIntensity) * 0.20 + // Inverser: moins de concurrence = meilleur
      (100 - entryDifficulty) * 0.15 +      // Inverser: moins de barri√®res = meilleur
      growthPotential * 0.25 +
      customerDemand * 0.15
    );

    // Niveau de confiance bas√© sur la compl√©tude des donn√©es
    const confidenceLevel = this.assessConfidence(data);

    return {
      market_attractiveness: marketAttractiveness,
      competitive_intensity: competitiveIntensity,
      entry_difficulty: entryDifficulty,
      growth_potential: growthPotential,
      customer_demand: customerDemand,
      market_opportunity_index: moi,
      confidence_level: confidenceLevel,
      scoring_rationale: this.generateScoringRationale(
        moi,
        marketAttractiveness,
        competitiveIntensity,
        growthPotential
      ),
    };
  }

  /**
   * Score l'attractivit√© du march√© (0-100)
   */
  private scoreMarketAttractiveness(marketOverview: IMarketOverview): number {
    let score = 50; // Base

    // Taille du march√©
    if (marketOverview.market_size.includes('milliard') || marketOverview.market_size.includes('billion')) {
      score += 20;
    } else if (marketOverview.market_size.includes('million')) {
      score += 10;
    }

    // Taux de croissance
    const growthMatch = marketOverview.growth_rate.match(/(\d+)/);
    if (growthMatch) {
      const growthRate = parseInt(growthMatch[1]);
      if (growthRate >= 20) score += 20;
      else if (growthRate >= 10) score += 15;
      else if (growthRate >= 5) score += 10;
    }

    // Tendances positives
    score += Math.min(marketOverview.trends.length * 2, 10);

    return Math.min(score, 100);
  }

  /**
   * Score l'intensit√© concurrentielle (0-100, plus √©lev√© = plus comp√©titif)
   */
  private scoreCompetitiveIntensity(competition: ICompetitionAnalysis): number {
    let score = 30; // Base

    // Nombre de concurrents
    const competitorCount = competition.main_competitors.length;
    score += Math.min(competitorCount * 10, 30);

    // Pr√©sence de leaders dominants
    const hasLeader = competition.main_competitors.some(c => c.position?.toLowerCase().includes('leader'));
    if (hasLeader) score += 20;

    // Barri√®res √† l'entr√©e (plus de barri√®res = plus difficile pour nouveaux entrants = moins comp√©titif pour nous)
    score -= Math.min(competition.entry_barriers.length * 5, 20);

    return Math.max(0, Math.min(score, 100));
  }

  /**
   * Score la difficult√© d'entr√©e (0-100)
   */
  private scoreEntryDifficulty(competition: ICompetitionAnalysis, opportunities: IOpportunity[]): number {
    let score = 40; // Base

    // Barri√®res √† l'entr√©e
    score += Math.min(competition.entry_barriers.length * 8, 40);

    // Opportunit√©s high impact r√©duisent la difficult√©
    const highImpactOpp = opportunities.filter(o => o.potential_impact === 'high').length;
    score -= highImpactOpp * 10;

    return Math.max(0, Math.min(score, 100));
  }

  /**
   * Score le potentiel de croissance (0-100)
   */
  private scoreGrowthPotential(
    marketOverview: IMarketOverview,
    opportunities: IOpportunity[],
    threats: IThreat[]
  ): number {
    let score = 50; // Base

    // Tendances du march√©
    score += Math.min(marketOverview.trends.length * 3, 15);

    // Opportunit√©s
    opportunities.forEach(opp => {
      if (opp.potential_impact === 'high') score += 10;
      else if (opp.potential_impact === 'medium') score += 5;
      else score += 2;
    });

    // Menaces (r√©duisent le potentiel)
    threats.forEach(threat => {
      if (threat.severity === 'high' && threat.probability === 'high') score -= 10;
      else if (threat.severity === 'high' || threat.probability === 'high') score -= 5;
      else score -= 2;
    });

    return Math.max(0, Math.min(score, 100));
  }

  /**
   * Score la demande client (0-100)
   */
  private scoreCustomerDemand(customerAnalysis: ICustomerAnalysis): number {
    let score = 40; // Base

    // Nombre de personas identifi√©s
    score += Math.min(customerAnalysis.personas.length * 10, 20);

    // Pain points identifi√©s
    const totalPainPoints = customerAnalysis.personas.reduce(
      (sum, p) => sum + p.pain_points.length,
      0
    );
    score += Math.min(totalPainPoints * 3, 20);

    // Besoins globaux
    score += Math.min(customerAnalysis.customer_needs.length * 4, 20);

    return Math.min(score, 100);
  }

  /**
   * √âvalue le niveau de confiance de l'analyse
   */
  private assessConfidence(data: any): 'high' | 'medium' | 'low' {
    let score = 0;

    // V√©rifier la compl√©tude des donn√©es
    if (data.market_overview?.segments?.length > 0) score++;
    if (data.competition?.main_competitors?.length >= 3) score++;
    if (data.customer_analysis?.personas?.length >= 2) score++;
    if (data.opportunities?.length >= 3) score++;
    if (data.threats?.length >= 2) score++;
    if (data.ocean_blue_strategy?.create?.length > 0) score++;

    if (score >= 5) return 'high';
    if (score >= 3) return 'medium';
    return 'low';
  }

  /**
   * G√©n√®re le rationale du scoring
   */
  private generateScoringRationale(
    moi: number,
    attractiveness: number,
    intensity: number,
    growth: number
  ): string {
    let rationale = `MOI de ${moi}/100. `;

    if (moi >= 70) {
      rationale += 'March√© tr√®s attractif avec fort potentiel. ';
    } else if (moi >= 50) {
      rationale += 'March√© mod√©r√©ment attractif avec opportunit√©s √† saisir. ';
    } else {
      rationale += 'March√© difficile n√©cessitant une approche diff√©renci√©e. ';
    }

    rationale += `Attractivit√© march√©: ${attractiveness}/100. `;
    rationale += `Intensit√© concurrentielle: ${intensity}/100. `;
    rationale += `Potentiel croissance: ${growth}/100.`;

    return rationale;
  }

  /**
   * Calcule la prochaine date de rafra√Æchissement
   */
  private calculateNextRefreshDate(frequency: 'weekly' | 'monthly' | 'quarterly'): Date {
    const now = new Date();
    switch (frequency) {
      case 'weekly':
        return new Date(now.setDate(now.getDate() + 7));
      case 'monthly':
        return new Date(now.setMonth(now.getMonth() + 1));
      case 'quarterly':
        return new Date(now.setMonth(now.getMonth() + 3));
    }
  }

  /**
   * Retourne les sources de donn√©es utilis√©es
   */
  private getDataSources(): IDataSource[] {
    return [
      {
        name: 'MistralAI Large Model',
        type: 'api',
        collected_at: new Date(),
        reliability: 'high',
      },
      {
        name: 'Analyse automatique secteur',
        type: 'database',
        collected_at: new Date(),
        reliability: 'medium',
      },
    ];
  }

  /**
   * G√©n√®re un rapport Markdown
   */
  private generateMarkdownReport(data: any, scoring: IScoring): string {
    return `# Analyse de March√©

## üìä Market Opportunity Index (MOI): ${scoring.market_opportunity_index}/100

**Niveau de confiance:** ${scoring.confidence_level === 'high' ? 'üü¢ √âlev√©' : scoring.confidence_level === 'medium' ? 'üü° Moyen' : 'üî¥ Faible'}

${scoring.scoring_rationale}

---

## Vue d'ensemble du march√©

**Taille du march√©:** ${data.market_overview.market_size}
**Taux de croissance:** ${data.market_overview.growth_rate}

### Tendances cl√©s
${data.market_overview.trends.map((t: string) => `- ${t}`).join('\n')}

### Segments de march√©
${data.market_overview.segments.map((s: any) => `
**${s.name}**
- Taille: ${s.size}
- Croissance: ${s.growth}
`).join('\n')}

---

## Analyse concurrentielle

**Paysage:** ${data.competition.competitive_landscape}

### Principaux concurrents
${data.competition.main_competitors.map((c: any) => `
**${c.name}** (${c.position})
- Forces: ${c.strengths.join(', ')}
- Faiblesses: ${c.weaknesses.join(', ')}
- Part de march√©: ${c.market_share || 'N/A'}
`).join('\n')}

---

## Strat√©gie Ocean Blue

**Proposition de valeur:** ${data.ocean_blue_strategy.value_proposition}

**March√© cible:** ${data.ocean_blue_strategy.target_market}

| √âliminer | R√©duire | Augmenter | Cr√©er |
|----------|---------|-----------|-------|
${Math.max(
  data.ocean_blue_strategy.eliminate.length,
  data.ocean_blue_strategy.reduce.length,
  data.ocean_blue_strategy.increase.length,
  data.ocean_blue_strategy.create.length
) > 0 ? Array.from({
  length: Math.max(
    data.ocean_blue_strategy.eliminate.length,
    data.ocean_blue_strategy.reduce.length,
    data.ocean_blue_strategy.increase.length,
    data.ocean_blue_strategy.create.length
  )
}, (_, i) => `| ${data.ocean_blue_strategy.eliminate[i] || ''} | ${data.ocean_blue_strategy.reduce[i] || ''} | ${data.ocean_blue_strategy.increase[i] || ''} | ${data.ocean_blue_strategy.create[i] || ''} |`).join('\n') : ''}

---

## Opportunit√©s

${data.opportunities.map((o: IOpportunity, i: number) => `
### ${i + 1}. ${o.title}
${o.description}

- **Impact potentiel:** ${o.potential_impact === 'high' ? 'üî• √âlev√©' : o.potential_impact === 'medium' ? '‚ö° Moyen' : 'üí° Faible'}
- **D√©lai:** ${o.timeframe}
${o.required_resources ? `- **Ressources:** ${o.required_resources.join(', ')}` : ''}
`).join('\n')}

---

## Menaces

${data.threats.map((t: IThreat, i: number) => `
### ${i + 1}. ${t.title}
${t.description}

- **S√©v√©rit√©:** ${t.severity === 'high' ? 'üî¥ √âlev√©e' : t.severity === 'medium' ? 'üü° Moyenne' : 'üü¢ Faible'}
- **Probabilit√©:** ${t.probability === 'high' ? 'üî¥ √âlev√©e' : t.probability === 'medium' ? 'üü° Moyenne' : 'üü¢ Faible'}
${t.mitigation ? `- **Mitigation:** ${t.mitigation.join(', ')}` : ''}
`).join('\n')}

---

## Scoring d√©taill√©

| Dimension | Score | Interpr√©tation |
|-----------|-------|----------------|
| Attractivit√© du march√© | ${scoring.market_attractiveness}/100 | ${scoring.market_attractiveness >= 70 ? 'üü¢ Tr√®s attractif' : scoring.market_attractiveness >= 50 ? 'üü° Mod√©r√©ment attractif' : 'üî¥ Peu attractif'} |
| Intensit√© concurrentielle | ${scoring.competitive_intensity}/100 | ${scoring.competitive_intensity >= 70 ? 'üî¥ Tr√®s comp√©titif' : scoring.competitive_intensity >= 50 ? 'üü° Mod√©r√©ment comp√©titif' : 'üü¢ Peu comp√©titif'} |
| Difficult√© d'entr√©e | ${scoring.entry_difficulty}/100 | ${scoring.entry_difficulty >= 70 ? 'üî¥ Tr√®s difficile' : scoring.entry_difficulty >= 50 ? 'üü° Mod√©r√©ment difficile' : 'üü¢ Facile'} |
| Potentiel de croissance | ${scoring.growth_potential}/100 | ${scoring.growth_potential >= 70 ? 'üü¢ Tr√®s √©lev√©' : scoring.growth_potential >= 50 ? 'üü° Mod√©r√©' : 'üî¥ Faible'} |
| Demande client | ${scoring.customer_demand}/100 | ${scoring.customer_demand >= 70 ? 'üü¢ Tr√®s forte' : scoring.customer_demand >= 50 ? 'üü° Mod√©r√©e' : 'üî¥ Faible'} |

---

*Analyse g√©n√©r√©e automatiquement par Ezia Market Research Agent*
`;
  }
}
