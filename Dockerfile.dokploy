# Dockerfile optimisé pour Dokploy avec Tailwind CSS v3
FROM node:20-alpine AS builder

RUN apk add --no-cache libc6-compat
# Enable pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate
WORKDIR /app

# Copier les fichiers de package
COPY package.json pnpm-lock.yaml ./

# Installer TOUTES les dépendances (dev + prod)
RUN --mount=type=cache,target=/root/.local/share/pnpm/store \
    pnpm install --frozen-lockfile || pnpm install

# Copier le code source
COPY . .

# Script déjà copié avec COPY . .

# Nettoyer les caches possibles
RUN rm -rf .next node_modules/.cache

# Désactiver temporairement le middleware problématique
RUN mv middleware.ts middleware.ts.disabled || true

# Désactiver standalone output temporairement pour éviter les erreurs
RUN sed -i "s/output: 'standalone',/\/\/ output: 'standalone',/g" next.config.ts || true

# CSS déjà compilé dans le repository, pas besoin de le recompiler

# Variables d'environnement pour le build
ENV NEXT_TELEMETRY_DISABLED=1
ENV SKIP_ENV_VALIDATION=1
ENV NODE_ENV=production
ENV MONGODB_URI="mongodb://localhost:27017/temp"
ENV HF_TOKEN="placeholder"
ENV DEFAULT_HF_TOKEN="placeholder"
ENV MISTRAL_API_KEY="placeholder"

# Build avec plus de mémoire
RUN NODE_OPTIONS="--max-old-space-size=4096" pnpm run build

# Stage de production
FROM node:20-alpine AS runner

# Installer bash pour le terminal Dokploy
RUN apk add --no-cache bash

# Installer pnpm dans le runner aussi
RUN corepack enable && corepack prepare pnpm@latest --activate

WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Copier tous les fichiers nécessaires (pas en mode standalone)
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/next.config.ts ./next.config.ts
COPY --from=builder /app/postcss.config.js ./postcss.config.js
COPY --from=builder /app/tailwind.config.js ./tailwind.config.js

# Copier les fichiers CSS et images
COPY --from=builder /app/app ./app
COPY --from=builder /app/assets ./assets
COPY --from=builder /app/public ./public

# Les scripts ne sont plus nécessaires car le CSS est déjà compilé

# Créer les dossiers avec permissions ouvertes (pour Dokploy)
RUN mkdir -p .data .next/cache public && \
    chmod -R 777 .data .next/cache && \
    chmod -R 755 public && \
    ls -la /app/public/img/mascottes/ || echo "Images directory not found"

# Ne pas utiliser d'utilisateur non-root pour Dokploy
# USER nextjs

EXPOSE 3000

# Forcer le mode production
ENV NODE_ENV=production

# Commande simple pour démarrer
CMD ["pnpm", "start"]