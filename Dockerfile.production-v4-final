# DOCKERFILE PRODUCTION - Compatible Tailwind v4
FROM node:20-alpine AS deps
RUN apk add --no-cache libc6-compat
# Enable pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate
WORKDIR /app
COPY package.json pnpm-lock.yaml ./
RUN --mount=type=cache,target=/root/.local/share/pnpm/store \
    pnpm install --frozen-lockfile

FROM node:20-alpine AS builder
RUN apk add --no-cache libc6-compat
# Enable pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# FIX CRITIQUE: Modifier les fichiers pour la production
# 1. Fix CSS - remplacer @import par @tailwind
RUN sed -i 's/@import "tailwindcss";/@tailwind base;\n@tailwind components;\n@tailwind utilities;/' assets/globals.css

# 2. Fix PostCSS config
RUN echo 'module.exports = {' > postcss.config.js && \
    echo '  plugins: {' >> postcss.config.js && \
    echo '    tailwindcss: {},' >> postcss.config.js && \
    echo '    autoprefixer: {},' >> postcss.config.js && \
    echo '  },' >> postcss.config.js && \
    echo '}' >> postcss.config.js

# 3. Supprimer le middleware problématique
RUN rm -f middleware.ts middleware.js

# Variables pour le build
ENV NEXT_TELEMETRY_DISABLED 1
ENV NODE_ENV production
ENV SKIP_ENV_VALIDATION 1
ENV MONGODB_URI mongodb://localhost:27017/temp

# Build de production
RUN pnpm run build

FROM node:20-alpine AS runner
WORKDIR /app

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1
ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

# Copier les fichiers nécessaires
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# Permissions
RUN mkdir -p .data .next/cache && \
    chmod -R 777 .data .next/cache

EXPOSE 3000

CMD ["node", "server.js"]